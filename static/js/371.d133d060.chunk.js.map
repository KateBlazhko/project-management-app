{"version":3,"file":"static/js/371.d133d060.chunk.js","mappings":"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","sources":["api/tasks/deleteTask.ts","api/columns/createColumn.ts","api/columns/updateColumnsSet.ts","api/helpers/reoderColumnsApi.ts","api/tasks/updateTasksSet.ts","api/helpers/reoderTasksApi.ts","api/columns/deleteColumn.ts","api/columns/updateColumn.ts","api/tasks/createTask.ts","components/FormColumnUpdate/FormColumnUpdate.tsx","components/FormTask/FormTask.tsx","components/TaskList/TaskList.tsx","webpack://project-management-app/./src/components/Column/Column.module.scss?8e42","components/Column/constants.ts","components/Column/Column.tsx","components/FormColumn/FormColumn.tsx","components/helpers/reorderItems.ts","webpack://project-management-app/./src/components/Board/Board.module.scss?0a01","components/Board/constants.ts","components/Board/Board.tsx","components/DialogDelete/DialogDelete.tsx","webpack://project-management-app/./src/components/Loader/Loader.module.scss?a435","components/Loader/Loader.tsx","components/Modal/BasicModal.tsx","webpack://project-management-app/./src/components/Task/Task.module.scss?c652","api/tasks/updateTask.ts","components/FormTaskUpdate/FormTaskUpdate.tsx","components/Menu/BasicMenu.tsx","components/Task/Task.tsx"],"sourcesContent":["import { URL_BOARDS } from '../../constants/constants';\nimport { TaskType } from 'types/types';\n\n//! Delete Task\nexport async function deleteTask(\n  token: string,\n  idBoard: string,\n  idColumn: string,\n  idTask: string\n): Promise<TaskType> {\n  try {\n    const response = await fetch(`${URL_BOARDS}/${idBoard}/columns/${idColumn}/tasks/${idTask}`, {\n      method: 'DELETE',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Request failed with status code ${response.status}`);\n    }\n\n    const task = await response.json();\n    return task;\n  } catch (e: unknown) {\n    const err = e as Error;\n    throw err;\n  }\n}\n","import { URL_BOARDS } from '../../constants/constants';\nimport { BodyForColumn, ColumnType } from 'types/types';\n\n//! Create Column in board\nexport async function createColumn(\n  token: string,\n  idBoard: string,\n  obj: BodyForColumn\n): Promise<ColumnType> {\n  try {\n    const response = await fetch(`${URL_BOARDS}/${idBoard}/columns`, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify(obj),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Request failed with status code ${response.status}`);\n    }\n    const column = await response.json();\n    return column;\n  } catch (e: unknown) {\n    const err = e as Error;\n    throw err;\n  }\n}\n","import { URL_COLUMNS_SET } from '../../constants/constants';\nimport { ColumnType, BodyForColumnsSetOrder } from 'types/types';\n\n//! Change order of list of columns\nexport async function updateColumnsSet(\n  token: string,\n  body: Array<BodyForColumnsSetOrder>\n): Promise<Array<ColumnType>> {\n  try {\n    const response = await fetch(URL_COLUMNS_SET, {\n      method: 'PATCH',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify(body),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Request failed with status code ${response.status}`);\n    }\n    const columnsUpdatedList = await response.json();\n    return columnsUpdatedList;\n  } catch (e: unknown) {\n    const err = e as Error;\n    throw err;\n  }\n}\n","import { updateColumnsSet } from 'api/columns/updateColumnsSet';\nimport { ColumnType } from 'types/types';\n\nexport const reoderColumnsApi = async (\n  columns: ColumnType[],\n  token: string\n): Promise<ColumnType[]> =>\n  await updateColumnsSet(\n    token,\n    columns.map(({ _id }, index) => {\n      return {\n        _id,\n        order: index,\n      };\n    })\n  );\n","import { URL_TASKS_SET } from '../../constants/constants';\nimport { TaskType, BodyForTasksSetOrder } from 'types/types';\n\n//! Change order of list of tasks\nexport async function updateTasksSet(\n  token: string,\n  body: Array<BodyForTasksSetOrder>\n): Promise<Array<TaskType>> {\n  try {\n    const response = await fetch(URL_TASKS_SET, {\n      method: 'PATCH',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify(body),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Request failed with status code ${response.status}`);\n    }\n\n    const tasksUpdatedList = await response.json();\n    return tasksUpdatedList;\n  } catch (e: unknown) {\n    const err = e as Error;\n    throw err;\n  }\n}\n","import { updateTasksSet } from 'api/tasks/updateTasksSet';\nimport { TaskType } from 'types/types';\n\nexport const reoderTasksApi = async (\n  tasks: TaskType[],\n  columnId: string,\n  token: string\n): Promise<TaskType[]> =>\n  await updateTasksSet(\n    token,\n    tasks.map(({ _id }, index) => {\n      return {\n        _id,\n        order: index,\n        columnId,\n      };\n    })\n  );\n","import { URL_BOARDS } from '../../constants/constants';\nimport { ColumnType } from 'types/types';\n\n//! Delete Column\nexport async function deleteColumn(\n  token: string,\n  idBoard: string,\n  idColumn: string\n): Promise<ColumnType> {\n  try {\n    const response = await fetch(`${URL_BOARDS}/${idBoard}/columns/${idColumn}`, {\n      method: 'DELETE',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Request failed with status code ${response.status}`);\n    }\n\n    const column = await response.json();\n    return column;\n  } catch (e: unknown) {\n    const err = e as Error;\n    throw err;\n  }\n}\n","import { URL_BOARDS } from '../../constants/constants';\nimport { BodyForColumn, ColumnType } from 'types/types';\n\n//! Update Column\nexport async function updateColumn(\n  token: string,\n  idBoard: string,\n  idColumn: string,\n  obj: BodyForColumn\n): Promise<ColumnType> {\n  try {\n    const response = await fetch(`${URL_BOARDS}/${idBoard}/columns/${idColumn}`, {\n      method: 'PUT',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify(obj),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Request failed with status code ${response.status}`);\n    }\n\n    const columnUpdated = await response.json();\n    return columnUpdated;\n  } catch (e: unknown) {\n    const err = e as Error;\n    throw err;\n  }\n}\n","import { URL_BOARDS } from '../../constants/constants';\nimport { TaskType, BodyForTask } from 'types/types';\n\n//! Create Task in column\nexport async function createTask(\n  token: string,\n  idBoard: string,\n  idColumn: string,\n  obj: BodyForTask\n): Promise<TaskType> {\n  try {\n    const response = await fetch(`${URL_BOARDS}/${idBoard}/columns/${idColumn}/tasks`, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify(obj),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Request failed with status code ${response.status}`);\n    }\n\n    const task = await response.json();\n    return task;\n  } catch (e: unknown) {\n    const err = e as Error;\n    throw err;\n  }\n}\n","import { Box, IconButton, TextField } from '@mui/material';\nimport TaskAltRoundedIcon from '@mui/icons-material/TaskAltRounded';\nimport BlockRoundedIcon from '@mui/icons-material/BlockRounded';\nimport { FormEvent, MutableRefObject, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ColumnType } from 'types/types';\n\ninterface FormColumnProps {\n  setIsInput: (arg: boolean) => void;\n  titleColumn: string;\n  handleClickEdit: (event: FormEvent<HTMLFormElement>, title: string) => Promise<ColumnType | void>;\n}\n\nconst style = {\n  marginTop: 1,\n  paddingRight: 3,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  gap: 1,\n};\n\nexport function FormColumnUpdate(props: FormColumnProps) {\n  const { t } = useTranslation();\n\n  const titleColumn: MutableRefObject<HTMLInputElement | null | undefined> = useRef();\n\n  useEffect(() => {\n    (titleColumn.current as HTMLInputElement).value = props.titleColumn;\n\n    const setBlur = (event: KeyboardEvent) => {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n        titleColumn.current?.blur();\n      }\n    };\n    titleColumn.current?.addEventListener('keypress', setBlur);\n\n    return () => {\n      titleColumn.current?.removeEventListener('keypress', setBlur);\n    };\n  }, []);\n\n  const handleCancel = () => {\n    props.setIsInput(false);\n  };\n\n  const handleFormSubmit = (event: FormEvent<HTMLFormElement>) => {\n    const titleUpdated = (titleColumn.current as HTMLInputElement).value;\n    props.handleClickEdit(event, titleUpdated);\n    props.setIsInput(false);\n  };\n\n  return (\n    <form style={{ width: '100%' }} onSubmit={handleFormSubmit}>\n      <Box>\n        <TextField\n          variant=\"outlined\"\n          label={t('boards.formColumnTitle')}\n          name=\"title\"\n          inputRef={titleColumn}\n          autoFocus={true}\n          multiline={true}\n          fullWidth\n          required\n          sx={{ wordBreak: 'break-word', paddingRight: 3 }}\n        />\n\n        <Box sx={style}>\n          <IconButton type=\"submit\" color=\"success\">\n            <TaskAltRoundedIcon />\n          </IconButton>\n          <IconButton onClick={handleCancel} color=\"colorful\">\n            <BlockRoundedIcon />\n          </IconButton>\n        </Box>\n      </Box>\n    </form>\n  );\n}\n","import { FormEvent, useEffect, useState } from 'react';\nimport { Box, TextField, Button } from '@mui/material';\nimport { TaskType } from 'types/types';\nimport { AppDispatch, IRootState } from 'store/model';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { getUserData } from 'store/authSlice';\nimport { useTranslation } from 'react-i18next';\n\ninterface FormTaskProps {\n  handleClickCreateTask: (\n    event: FormEvent<HTMLFormElement>,\n    title: string,\n    description: string,\n    id: string\n  ) => Promise<TaskType | void>;\n  openModal: boolean;\n  setOpenModal: (arg: boolean) => void;\n}\n\nconst style = {\n  maxWidth: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center',\n  gap: 5,\n};\n\nconst initialValues = {\n  title: '',\n  description: '',\n};\n\nexport function FormTask(props: FormTaskProps) {\n  const { t } = useTranslation();\n\n  const [values, setValues] = useState(initialValues);\n  const dispatch = useDispatch<AppDispatch>();\n\n  const { id, token } = useSelector((state: IRootState) => state.auth);\n\n  useEffect(() => {\n    dispatch(getUserData({ token, idUser: id }));\n  }, [token, id, dispatch]);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setValues({\n      ...values,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = (event: FormEvent<HTMLFormElement>) => {\n    props.handleClickCreateTask(event, values.title, values.description, id ? id : '');\n    props.setOpenModal(false);\n  };\n\n  return (\n    <form style={{ width: '100%' }} onSubmit={handleFormSubmit}>\n      <Box sx={style}>\n        <TextField\n          variant=\"outlined\"\n          label={t('boards.formTaskTitle')}\n          name=\"title\"\n          value={values.title}\n          onChange={handleInputChange}\n          multiline={true}\n          autoFocus={true}\n          fullWidth\n          required\n          sx={{ wordBreak: 'break-word' }}\n        />\n        <TextField\n          variant=\"outlined\"\n          label={t('boards.formTaskDesc')}\n          name=\"description\"\n          value={values.description}\n          onChange={handleInputChange}\n          multiline={true}\n          minRows={5}\n          fullWidth\n          required\n          sx={{ wordBreak: 'break-word' }}\n        />\n        <Button type=\"submit\" variant=\"outlined\" size=\"large\" color=\"success\">\n          {t('boards.addButton')}\n        </Button>\n      </Box>\n    </form>\n  );\n}\n","import Task from 'components/Task/Task';\nimport { memo } from 'react';\nimport { Draggable, DraggableProvided, DraggableStateSnapshot } from 'react-beautiful-dnd';\nimport { TaskListPropsType } from './model';\n\nconst TaskList = ({ tasks, idColumn, delTask, editTask }: TaskListPropsType) => (\n  <>\n    {tasks.map((task, index) => (\n      <Draggable key={task._id} draggableId={task._id} index={index}>\n        {(provider: DraggableProvided, snapshot: DraggableStateSnapshot): JSX.Element => (\n          <Task\n            idColumn={idColumn}\n            task={task}\n            delTask={delTask}\n            editTask={editTask}\n            provider={provider}\n            isDragging={snapshot.isDragging}\n          />\n        )}\n      </Draggable>\n    ))}\n  </>\n);\n\nexport default memo(TaskList);\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Column_list__6qOLs\",\"column\":\"Column_column__YYoUp\"};","export const DROPPABLE_TYPE_COLUMN = 'droppableColumn';\nexport const DRAGGABLE_ID_COLUMN = 'columnDrag';\n\nexport const BUTTON_INNER = 'Create task';\n\nexport const BODY = {\n  title: 'Task Kate',\n  description: 'Task Task Task Task',\n  userId: '636e7aa89cd7a9d447a0d611',\n  users: ['636e7aa89cd7a9d447a0d611'],\n};\n\nexport const SCROLL = 'Scrolling';\n\nexport const INITIAL_BODY_FOR_TASK = {\n  userId: '',\n  users: [''],\n  title: 'no title',\n  description: 'no description',\n};\n","import AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\nimport { Button, IconButton, Typography } from '@mui/material';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { deleteColumn } from 'api/columns/deleteColumn';\nimport { updateColumn } from 'api/columns/updateColumn';\nimport { createTask } from 'api/tasks/createTask';\nimport { deleteTask } from 'api/tasks/deleteTask';\nimport { DialogDelete } from 'components/DialogDelete/DialogDelete';\nimport { FormColumnUpdate } from 'components/FormColumnUpdate/FormColumnUpdate';\nimport { FormTask } from 'components/FormTask/FormTask';\nimport Loader from 'components/Loader/Loader';\nimport { BasicModal } from 'components/Modal/BasicModal';\nimport TaskList from 'components/TaskList/TaskList';\nimport { rootPortal } from 'index';\nimport { FormEvent, memo, useMemo, useState } from 'react';\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\nimport { createPortal } from 'react-dom';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { IRootState } from 'store/model';\nimport { ColumnType, TaskType } from 'types/types';\nimport styles from './Column.module.scss';\nimport { DROPPABLE_TYPE_COLUMN } from './constants';\nimport { ColumnPropsType } from './model';\n\nconst makeTasksSelector = () =>\n  createSelector(\n    [(state: IRootState) => state.board.taskByColumns, (_, id: string) => id],\n    (a, id) => (a ? a[id] : [])\n  );\n\nconst tokenSelector = createSelector([(state: IRootState) => state.auth], (a) => a.token);\n\nconst Column = ({\n  id,\n  title,\n  index,\n  order,\n  addTask,\n  delColumn,\n  delTask,\n  editTask,\n}: ColumnPropsType) => {\n  const { t } = useTranslation();\n  const { id: idBoard } = useParams();\n\n  const [openModal, setOpenModal] = useState<boolean>(false);\n\n  const token = useSelector((state: IRootState) => tokenSelector(state));\n\n  const tasksSelector = useMemo(makeTasksSelector, []);\n  const tasks = useSelector((state: IRootState) => tasksSelector(state, id));\n\n  const [openDialog, setOpenDialog] = useState<boolean>(false);\n  const [isInput, setIsInput] = useState<boolean>(false);\n  const [columnUpdated, setColumnUpdated] = useState<ColumnType | null>(null);\n  const [isLoading, setLoading] = useState<boolean>(false);\n\n  const handleClickOpenModal = (): void => setOpenModal(true);\n\n  const handleClickOpenDialog = (): void => setOpenDialog(true);\n\n  const handleClickOpenInput = (): void => setIsInput(true);\n\n  const handleClickCreateTask = async (\n    event: FormEvent<HTMLFormElement>,\n    title: string,\n    description: string,\n    idUser: string\n  ): Promise<TaskType | void> => {\n    event.preventDefault();\n\n    if (token && idBoard) {\n      const bodyTask = {\n        order: tasks.length,\n        userId: idUser,\n        users: [idUser],\n        title: title,\n        description: description,\n      };\n      setLoading(true);\n\n      const newTask = await createTask(token, idBoard, id, bodyTask);\n\n      setLoading(false);\n\n      addTask(newTask);\n      return newTask;\n    }\n  };\n\n  const handleClickDeleteButton = async (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ): Promise<void> => {\n    event.preventDefault();\n\n    if (token && idBoard) {\n      setLoading(true);\n\n      Promise.all(tasks.map(async ({ _id }) => await deleteTask(token, idBoard, id, _id)));\n      await deleteColumn(token, idBoard, id);\n\n      setLoading(false);\n\n      delColumn(id);\n    }\n  };\n\n  const handleClickEdit = async (\n    event: FormEvent<HTMLFormElement>,\n    title: string\n  ): Promise<ColumnType | void> => {\n    if (token && idBoard) {\n      setLoading(true);\n\n      const columnUpdated = await updateColumn(token, idBoard, id, { title: title, order: order });\n\n      setLoading(false);\n\n      setColumnUpdated(columnUpdated);\n      return columnUpdated;\n    }\n  };\n\n  return (\n    <>\n      {isLoading && createPortal(<Loader />, rootPortal)}\n      <Draggable draggableId={id} index={index}>\n        {(provider) => (\n          <div\n            {...provider.draggableProps}\n            {...provider.dragHandleProps}\n            ref={provider.innerRef}\n            className={styles.column}\n          >\n            {isInput ? (\n              <FormColumnUpdate\n                titleColumn={columnUpdated ? columnUpdated.title : title}\n                setIsInput={setIsInput}\n                handleClickEdit={handleClickEdit}\n              />\n            ) : (\n              <Typography\n                variant=\"h6\"\n                sx={{\n                  width: '100%',\n                  fontFamily: '\"Noto Sans\", sans-serif',\n                  letterSpacing: '0.0625rem',\n                  fontWeight: 700,\n                  fontSize: '18px',\n                  color: '#1c4931',\n                  textTransform: 'uppercase',\n                  textAlign: 'left',\n                  wordBreak: 'break-word',\n                  paddingRight: 3,\n                  cursor: 'pointer',\n                }}\n                onClick={handleClickOpenInput}\n              >\n                {columnUpdated ? columnUpdated.title : title}\n              </Typography>\n            )}\n\n            <Droppable droppableId={id} type={DROPPABLE_TYPE_COLUMN}>\n              {(provider) => {\n                return (\n                  <div className={styles.list} ref={provider.innerRef} {...provider.droppableProps}>\n                    <TaskList tasks={tasks} delTask={delTask} idColumn={id} editTask={editTask} />\n                    {provider.placeholder}\n                  </div>\n                );\n              }}\n            </Droppable>\n\n            <Button\n              variant=\"outlined\"\n              endIcon={<AddCircleRoundedIcon />}\n              color=\"success\"\n              onClick={handleClickOpenModal}\n            >\n              {t('boards.formTaskCreate')}\n            </Button>\n\n            {openModal && (\n              <BasicModal\n                title={t('boards.formTaskCreate')}\n                openModal={openModal}\n                setOpenModal={setOpenModal}\n              >\n                <FormTask\n                  handleClickCreateTask={handleClickCreateTask}\n                  openModal={openModal}\n                  setOpenModal={setOpenModal}\n                />\n              </BasicModal>\n            )}\n\n            <IconButton\n              onClick={handleClickOpenDialog}\n              aria-label=\"delete\"\n              sx={{ position: 'absolute', top: '1%', right: '1%', zIndex: 2 }}\n            >\n              <DeleteOutlineOutlinedIcon />\n            </IconButton>\n\n            {openDialog && (\n              <DialogDelete\n                title={t('boards.dialogColumn')}\n                openDialog={openDialog}\n                setOpenDialog={setOpenDialog}\n                func={handleClickDeleteButton}\n              />\n            )}\n          </div>\n        )}\n      </Draggable>\n    </>\n  );\n};\n\nexport default memo(Column);\n","import { FormEvent, useState } from 'react';\nimport { Box, TextField, Button } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\n\ninterface FormColumnProps {\n  handleClickCreateColumn: (event: FormEvent<HTMLFormElement>, title: string) => Promise<void>;\n  openModal: boolean;\n  setOpenModal: (arg: boolean) => void;\n}\n\nconst style = {\n  maxWidth: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center',\n  gap: 5,\n};\n\nexport function FormColumn(props: FormColumnProps) {\n  const { t } = useTranslation();\n\n  const [valueInput, setValueInput] = useState('');\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const title = event.target.value;\n    setValueInput(title);\n  };\n\n  const handleFormSubmit = (event: FormEvent<HTMLFormElement>) => {\n    props.handleClickCreateColumn(event, valueInput);\n    props.setOpenModal(false);\n  };\n\n  return (\n    <form style={{ width: '100%' }} onSubmit={handleFormSubmit}>\n      <Box sx={style}>\n        <TextField\n          variant=\"outlined\"\n          label={t('boards.formColumnTitle')}\n          name=\"title\"\n          value={valueInput}\n          onChange={handleInputChange}\n          autoFocus={true}\n          multiline={true}\n          fullWidth\n          required\n          sx={{ wordBreak: 'break-word' }}\n        />\n        <Button type=\"submit\" variant=\"outlined\" size=\"large\" color=\"success\">\n          {t('boards.addButton')}\n        </Button>\n      </Box>\n    </form>\n  );\n}\n","import { ColumnType, TaskType } from 'types/types';\n\nexport const reorderItems = <Type extends ColumnType | TaskType>(\n  array: Type[],\n  currentIndex: number,\n  destinationIndex: number\n) => {\n  const result = [...array];\n  const [removed] = result.splice(currentIndex, 1);\n\n  result.splice(destinationIndex, 0, removed);\n\n  return result.map((item, index) => ({ ...item, order: index }));\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"Board_wrap__7727q\",\"board\":\"Board_board__IksR5\",\"columns\":\"Board_columns__tYc2s\",\"create\":\"Board_create__KPtvz\"};","export const DROPPABLE_ID_BOARD = 'board';\nexport const DROPPABLE_TYPE_BOARD = 'droppableBoard';\nexport const DROPPABLE_DIRECTION_BOARD = 'horizontal';\n\nexport const BUTTON_INNER = 'Create column';\nexport const PSEUDO_TITLE = 'Kate Column';\n","import AddBoxOutlinedIcon from '@mui/icons-material/AddCircleRounded';\nimport { Button, Typography } from '@mui/material';\nimport { createColumn } from 'api/columns/createColumn';\nimport { reoderColumnsApi } from 'api/helpers/reoderColumnsApi';\nimport { reoderTasksApi } from 'api/helpers/reoderTasksApi';\nimport Column from 'components/Column/Column';\nimport { DROPPABLE_TYPE_COLUMN } from 'components/Column/constants';\nimport { FormColumn } from 'components/FormColumn/FormColumn';\nimport { reorderItems } from 'components/helpers/reorderItems';\nimport Loader from 'components/Loader/Loader';\nimport { BasicModal } from 'components/Modal/BasicModal';\nimport { rootPortal } from 'index';\nimport { FormEvent, useCallback, useEffect, useState } from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { createPortal } from 'react-dom';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { BOARDS_PATH } from 'router/constants';\nimport { getBoardData, setColumns, setTasksByColumn } from 'store/boardSlice';\nimport { AppDispatch, IRootState } from 'store/model';\nimport { ColumnType, TaskType } from 'types/types';\nimport styles from './Board.module.scss';\nimport { DROPPABLE_DIRECTION_BOARD, DROPPABLE_ID_BOARD, DROPPABLE_TYPE_BOARD } from './constants';\nimport { TasksByColumnsType } from './model';\n\nconst Board = () => {\n  const { t } = useTranslation();\n  const { id: idBoard } = useParams();\n  const navigate = useNavigate();\n  const dispatch = useDispatch<AppDispatch>();\n\n  const { titleBoard, columns, taskByColumns, isLoading } = useSelector(\n    (state: IRootState) => state.board\n  );\n  const { token } = useSelector((state: IRootState) => state.auth);\n\n  const [openModal, setOpenModal] = useState<boolean>(false);\n  const [isLoadingColumn, setLoadingColumn] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (idBoard && token) {\n      const getResult = async (): Promise<void> => {\n        dispatch(getBoardData({ token, idBoard }));\n      };\n\n      getResult();\n    }\n  }, [idBoard, token, dispatch]);\n\n  useEffect(() => {\n    if (columns.length && token) {\n      reoderColumnsApi(columns, token);\n    }\n  }, [columns, token]);\n\n  const addTaskMemo = useCallback(\n    (newTask: TaskType): void => {\n      const addTask = ({ columnId }: TaskType): void => {\n        taskByColumns &&\n          dispatch(\n            setTasksByColumn({\n              taskByColumns: {\n                ...taskByColumns,\n                [columnId]: taskByColumns[columnId]\n                  ? [...taskByColumns[columnId], newTask]\n                  : [newTask],\n              },\n            })\n          );\n      };\n\n      addTask(newTask);\n    },\n    [taskByColumns, dispatch]\n  );\n\n  const delColumnMemo = useCallback(\n    (idColumn: string): void => {\n      const delColumn = (idColumn: string): void => {\n        dispatch(setColumns({ columns: columns.filter(({ _id }) => _id !== idColumn) }));\n\n        if (taskByColumns) {\n          const { [idColumn as keyof TasksByColumnsType]: deletedColumn, ...lastTasks } =\n            taskByColumns;\n\n          dispatch(setTasksByColumn({ taskByColumns: lastTasks }));\n        }\n      };\n\n      delColumn(idColumn);\n    },\n    [taskByColumns, dispatch, columns]\n  );\n\n  const delTaskMemo = useCallback(\n    (deletedTask: TaskType): void => {\n      const delTask = ({ columnId, _id: idDeletedTask }: TaskType): void => {\n        taskByColumns &&\n          dispatch(\n            setTasksByColumn({\n              taskByColumns: {\n                ...taskByColumns,\n                [columnId]: taskByColumns[columnId].filter(({ _id }) => _id !== idDeletedTask),\n              },\n            })\n          );\n      };\n\n      delTask(deletedTask);\n    },\n    [taskByColumns, dispatch]\n  );\n\n  const editTaskMemo = useCallback(\n    (editedTask: TaskType): void => {\n      const editTask = (taskNew: TaskType): void => {\n        taskByColumns &&\n          dispatch(\n            setTasksByColumn({\n              taskByColumns: {\n                ...taskByColumns,\n                [taskNew.columnId]: taskByColumns[taskNew.columnId].map((taskOld) => {\n                  if (taskOld._id === taskNew._id) {\n                    return taskNew;\n                  }\n\n                  return taskOld;\n                }),\n              },\n            })\n          );\n      };\n      editTask(editedTask);\n    },\n    [taskByColumns, dispatch]\n  );\n\n  const handleClickOpenModal = (): void => setOpenModal(true);\n\n  const handleDragEnd = ({\n    destination,\n    source: { index: sourceIndex, droppableId: sourceColumnId },\n    type,\n  }: DropResult): void => {\n    if (!destination) {\n      return;\n    }\n\n    const { droppableId: destColemnId, index: destIndex } = destination;\n\n    if (type === DROPPABLE_TYPE_BOARD) {\n      dispatch(setColumns({ columns: reorderItems<ColumnType>(columns, sourceIndex, destIndex) }));\n      return;\n    }\n\n    if (token && taskByColumns && type === DROPPABLE_TYPE_COLUMN) {\n      if (sourceColumnId === destColemnId) {\n        const newTasks = reorderItems<TaskType>(\n          taskByColumns[sourceColumnId],\n          sourceIndex,\n          destination.index\n        );\n\n        reoderTasksApi(newTasks, sourceColumnId, token);\n\n        dispatch(\n          setTasksByColumn({ taskByColumns: { ...taskByColumns, [sourceColumnId]: newTasks } })\n        );\n        return;\n      }\n\n      const newSourceTasks = [...taskByColumns[sourceColumnId]];\n      const newDestTasks = [...taskByColumns[destColemnId]];\n\n      const [removed] = newSourceTasks.splice(sourceIndex, 1);\n      const newRemoved = { ...removed, columnId: destColemnId };\n\n      newDestTasks.splice(destIndex, 0, newRemoved);\n\n      reoderTasksApi(newDestTasks, destColemnId, token);\n\n      dispatch(\n        setTasksByColumn({\n          taskByColumns: {\n            ...taskByColumns,\n            [sourceColumnId]: newSourceTasks,\n            [destColemnId]: newDestTasks,\n          },\n        })\n      );\n      return;\n    }\n  };\n\n  const handleClickCreateColumn = async (\n    event: FormEvent<HTMLFormElement>,\n    title: string\n  ): Promise<void> => {\n    event.preventDefault();\n    if (token && idBoard) {\n      // dispatch(setColumnsData({ token, idBoard, title, order: columns.length }));\n      setLoadingColumn(true);\n\n      const newColumn = await createColumn(token, idBoard, {\n        title,\n        order: columns.length,\n      });\n\n      setLoadingColumn(false);\n\n      dispatch(setColumns({ columns: [...columns, newColumn] }));\n\n      dispatch(setTasksByColumn({ taskByColumns: { ...taskByColumns, [newColumn._id]: [] } }));\n    }\n  };\n\n  const goBoards = (): void => navigate(BOARDS_PATH);\n  const handleClickBack = (): void => goBoards();\n\n  return (\n    <div className={styles.wrap}>\n      <Button\n        component=\"label\"\n        variant=\"outlined\"\n        color=\"basic\"\n        onClick={handleClickBack}\n        sx={{ alignSelf: 'flex-start' }}\n      >\n        {t('boards.backBoards')}\n      </Button>\n\n      <Typography\n        variant=\"h3\"\n        sx={{\n          fontFamily: '\"Nunito Sans\", sans-serif',\n          fontSize: '40px',\n          fontWeight: 700,\n          textAlign: 'center',\n          wordBreak: 'break-word',\n        }}\n      >\n        {titleBoard}\n      </Typography>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <DragDropContext onDragEnd={handleDragEnd}>\n          {isLoadingColumn && createPortal(<Loader />, rootPortal)}\n          <Droppable\n            droppableId={DROPPABLE_ID_BOARD}\n            type={DROPPABLE_TYPE_BOARD}\n            direction={DROPPABLE_DIRECTION_BOARD}\n          >\n            {(provider) => (\n              <div className={styles.board} ref={provider.innerRef} {...provider.droppableProps}>\n                {columns.map(({ _id, title, order }, index) => (\n                  <Column\n                    key={_id}\n                    id={_id}\n                    index={index}\n                    title={title}\n                    order={order}\n                    addTask={addTaskMemo}\n                    delColumn={delColumnMemo}\n                    editTask={editTaskMemo}\n                    delTask={delTaskMemo}\n                  />\n                ))}\n                {provider.placeholder}\n\n                <div className={styles.create} onClick={handleClickOpenModal}>\n                  <AddBoxOutlinedIcon fontSize=\"large\" sx={{ color: '#d4d4d4' }} />\n                </div>\n\n                {openModal && (\n                  <BasicModal\n                    title={t('boards.formColumnCreate')}\n                    openModal={openModal}\n                    setOpenModal={setOpenModal}\n                  >\n                    <FormColumn\n                      handleClickCreateColumn={handleClickCreateColumn}\n                      openModal={openModal}\n                      setOpenModal={setOpenModal}\n                    />\n                  </BasicModal>\n                )}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      )}\n    </div>\n  );\n};\n\nexport default Board;\n","import BlockRoundedIcon from '@mui/icons-material/BlockRounded';\nimport TaskAltRoundedIcon from '@mui/icons-material/TaskAltRounded';\nimport {\n  Box,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  IconButton,\n} from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { DialogProps } from './model';\n\nconst style = {\n  width: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  gap: 1,\n};\n\nexport function DialogDelete(props: DialogProps) {\n  const { t } = useTranslation();\n\n  const handleClose = () => {\n    props.setOpenDialog(false);\n  };\n\n  const handleAgree = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    props.func(event);\n    handleClose();\n  };\n\n  return (\n    <Box>\n      <Dialog\n        open={props.openDialog}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n        sx={{\n          '& .MuiPaper-root': {\n            borderRadius: 2.5,\n          },\n        }}\n      >\n        <DialogTitle id=\"alert-dialog-title\">{props.title}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {t('boards.dialogWarning')}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Box sx={style}>\n            <IconButton onClick={handleAgree} color=\"success\">\n              <TaskAltRoundedIcon />\n            </IconButton>\n            <IconButton onClick={handleClose} color=\"colorful\">\n              <BlockRoundedIcon />\n            </IconButton>\n          </Box>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"loader-wrapper\":\"Loader_loader-wrapper__jCjQW\",\"loader\":\"Loader_loader__DwtSp\",\"spin\":\"Loader_spin__ddwRw\",\"spin-reverse\":\"Loader_spin-reverse__ejSZn\",\"loaded\":\"Loader_loaded__89Vua\"};","import { Backdrop } from '@mui/material';\nimport styles from './Loader.module.scss';\n\nconst Loader = () => {\n  return (\n    <Backdrop sx={{ backgroundColor: 'rgba(0, 0, 0, 0)', zIndex: 9 }} open={true}>\n      <div className={styles['loader-wrapper']}>\n        <div className={styles['loader']}></div>\n        <div className={[styles['loader-section'], styles['section-left']].join(' ')}></div>\n        <div className={[styles['loader-section'], styles['section-right']].join(' ')}></div>\n      </div>\n    </Backdrop>\n  );\n};\nexport default Loader;\n","import Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport Typography from '@mui/material/Typography';\nimport * as React from 'react';\n\ninterface ModalProps {\n  children: React.ReactNode;\n  title: string;\n  openModal: boolean;\n  setOpenModal: (arg: boolean) => void;\n}\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n\n  maxWidth: 600,\n  width: '90%',\n  gap: 5,\n  p: { xs: 2.5, sm: 5 },\n\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center',\n\n  bgcolor: 'background.paper',\n  borderRadius: 2.5,\n};\n\nconst theme = createTheme({\n  typography: {\n    allVariants: {\n      fontFamily: ['\"Noto Sans\"', 'Roboto', 'Arial', 'sans-serif'].join(','),\n      textTransform: 'none',\n    },\n  },\n});\n\nexport function BasicModal(props: ModalProps) {\n  const handleClickCloseModal = () => {\n    props.setOpenModal(false);\n  };\n\n  return (\n    <>\n      <Modal\n        open={props.openModal}\n        onClose={handleClickCloseModal}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style}>\n          <ThemeProvider theme={theme}>\n            <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\" textAlign=\"center\">\n              {props.title}\n            </Typography>\n\n            {props.children}\n          </ThemeProvider>\n        </Box>\n      </Modal>\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"task\":\"Task_task__2l5mt\"};","import { URL_BOARDS } from '../../constants/constants';\nimport { TaskType, BodyForTaskUpdating } from 'types/types';\n\n//! Update Task\nexport async function updateTask(\n  token: string,\n  idBoard: string,\n  idColumn: string,\n  idTask: string,\n  obj: BodyForTaskUpdating\n): Promise<TaskType> {\n  try {\n    const response = await fetch(`${URL_BOARDS}/${idBoard}/columns/${idColumn}/tasks/${idTask}`, {\n      method: 'PUT',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify(obj),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Request failed with status code ${response.status}`);\n    }\n\n    const taskUpdated = await response.json();\n    return taskUpdated;\n  } catch (e: unknown) {\n    const err = e as Error;\n    throw err;\n  }\n}\n","import { Box, Button, TextField, Typography } from '@mui/material';\nimport { getUser } from 'api/users/getUser';\nimport { FormEvent, MutableRefObject, useEffect, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { IRootState } from 'store/model';\nimport { useTranslation } from 'react-i18next';\nimport { TaskType } from 'types/types';\n\ninterface FormTaskProps {\n  title: string;\n  description: string;\n  userId: string;\n  users: Array<string>;\n  handleClickEditButton: (\n    event: FormEvent<HTMLFormElement>,\n    title: string,\n    description: string\n    // users: Array<string>\n  ) => Promise<TaskType | void>;\n  openUpdate: boolean;\n  setOpenUpdate: (arg: boolean) => void;\n}\n\nconst style = {\n  maxWidth: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center',\n  gap: 5,\n};\n\nexport function FormTaskUpdate(props: FormTaskProps) {\n  const { t } = useTranslation();\n\n  const titleTask: MutableRefObject<HTMLInputElement | null | undefined> = useRef();\n  const descriptionTask: MutableRefObject<HTMLInputElement | null | undefined> = useRef();\n\n  const [ownerLogin, setOwnerLogin] = useState<string | null>(null);\n  const { token } = useSelector((state: IRootState) => state.auth);\n\n  useEffect(() => {\n    (titleTask.current as HTMLInputElement).value = props.title;\n    (descriptionTask.current as HTMLInputElement).value = props.description;\n  }, []);\n\n  useEffect(() => {\n    const getOwnerLogin = async () => {\n      if (token) {\n        const userData = await getUser(token, props.userId);\n        setOwnerLogin(userData.login);\n      }\n    };\n\n    getOwnerLogin();\n  }, [props.userId, token]);\n\n  const handleFormSubmit = (event: FormEvent<HTMLFormElement>) => {\n    const titleUpdated = (titleTask.current as HTMLInputElement).value;\n    const descriptionUpdated = (descriptionTask.current as HTMLInputElement).value;\n\n    props.handleClickEditButton(event, titleUpdated, descriptionUpdated);\n    props.setOpenUpdate(false);\n  };\n\n  return (\n    <form style={{ width: '100%' }} onSubmit={handleFormSubmit}>\n      <Box sx={style}>\n        <TextField\n          variant=\"outlined\"\n          label={t('boards.formTaskTitle')}\n          name=\"title\"\n          inputRef={titleTask}\n          autoFocus={true}\n          multiline={true}\n          fullWidth\n          required\n          sx={{ wordBreak: 'break-word' }}\n        />\n        <TextField\n          variant=\"outlined\"\n          label={t('boards.formTaskDesc')}\n          name=\"description\"\n          inputRef={descriptionTask}\n          multiline={true}\n          minRows={5}\n          fullWidth\n          required\n          sx={{ wordBreak: 'break-word' }}\n        />\n        {!!ownerLogin && (\n          <Typography>\n            {t('boards.taskOwner')}: {ownerLogin}\n          </Typography>\n        )}\n        <Button type=\"submit\" variant=\"outlined\" size=\"large\" color=\"success\">\n          {t('boards.updateButton')}\n        </Button>\n      </Box>\n    </form>\n  );\n}\n","import { IconButton, Menu, MenuItem } from '@mui/material';\nimport { useState } from 'react';\nimport { BasicMenuProps } from './model';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\n\nconst BasicMenu = ({\n  handleClickOpenDialog,\n  handleClickOpenUpdate,\n  setIsHovering,\n}: BasicMenuProps) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const openMenu = Boolean(anchorEl);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    event.preventDefault();\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = (): void => {\n    setIsHovering(false);\n    setAnchorEl(null);\n  };\n\n  const handleTouch = (event: React.TouchEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleUpdate = () => {\n    handleClickOpenUpdate();\n    handleClose();\n  };\n\n  const handleDelete = () => {\n    handleClickOpenDialog();\n    handleClose();\n  };\n\n  return (\n    <>\n      <IconButton\n        onClick={handleClick}\n        onTouchEnd={handleTouch}\n        aria-label=\"open\"\n        sx={{\n          position: 'absolute',\n          top: '50%',\n          right: 0,\n          zIndex: 2,\n          transform: 'translateY(-50%)',\n        }}\n      >\n        <MenuIcon fontSize=\"small\" />\n      </IconButton>\n      {openMenu && (\n        <Menu\n          anchorEl={anchorEl}\n          open={openMenu}\n          onClose={handleClose}\n          MenuListProps={{\n            'aria-labelledby': 'basic-button',\n          }}\n          sx={{\n            '& .MuiPaper-root': {\n              borderRadius: '10px',\n              boxShadow: '0 0 20px #d4d4d4',\n            },\n          }}\n        >\n          <MenuItem>\n            <IconButton onClick={handleUpdate} aria-label=\"edit\">\n              <EditOutlinedIcon fontSize=\"small\" />\n            </IconButton>\n          </MenuItem>\n          <MenuItem>\n            <IconButton onClick={handleDelete} aria-label=\"delete\">\n              <DeleteOutlineOutlinedIcon fontSize=\"small\" />\n            </IconButton>\n          </MenuItem>\n        </Menu>\n      )}\n    </>\n  );\n};\n\nexport default BasicMenu;\n","import { TaskPropsType } from './model';\nimport { deleteTask } from 'api/tasks/deleteTask';\nimport { useSelector } from 'react-redux';\nimport { IRootState } from 'store/model';\nimport { FormEvent, useState } from 'react';\nimport { TaskType } from 'types/types';\nimport { Typography } from '@mui/material';\nimport styles from './Task.module.scss';\nimport { DialogDelete } from 'components/DialogDelete/DialogDelete';\nimport { updateTask } from 'api/tasks/updateTask';\nimport { BasicModal } from 'components/Modal/BasicModal';\nimport { FormTaskUpdate } from 'components/FormTaskUpdate/FormTaskUpdate';\nimport { useTranslation } from 'react-i18next';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport BasicMenu from 'components/Menu/BasicMenu';\nimport Loader from 'components/Loader/Loader';\nimport { rootPortal } from 'index';\nimport { createPortal } from 'react-dom';\n\nconst Task = ({\n  idColumn,\n  task: {\n    _id: idTask,\n    title: titleTask,\n    description: descriptionTask,\n    order: orderTask,\n    userId: ownerTask,\n    users: usersOfTask,\n    boardId: idBoard,\n  },\n  delTask,\n  editTask,\n  isDragging,\n  provider,\n}: TaskPropsType) => {\n  const matches = useMediaQuery('(pointer: coarse)');\n\n  const { t } = useTranslation();\n\n  const { token } = useSelector((state: IRootState) => state.auth);\n  const [isHovering, setIsHovering] = useState(false);\n  const [taskUpdated, setTaskUpdated] = useState<TaskType | null>(null); //! для видоизменения тайтла сразу после апдейта\n  const [openUpdate, setOpenUpdate] = useState<boolean>(false);\n  const [openDialog, setOpenDialog] = useState<boolean>(false);\n  const [isLoading, setLoading] = useState<boolean>(false);\n\n  const handleClickOpenUpdate = (): void => setOpenUpdate(true);\n\n  const handlePointerOver = (): void => setIsHovering(true);\n\n  const handlePointerOut = (): void => setIsHovering(false);\n\n  const handleClickOpenDialog = (): void => setOpenDialog(true);\n\n  const handleClickDeleteButton = async (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ): Promise<void> => {\n    event.preventDefault();\n\n    if (token) {\n      setLoading(true);\n\n      const deletedTask = await deleteTask(token, idBoard, idColumn, idTask);\n\n      setLoading(false);\n\n      delTask(deletedTask);\n    }\n  };\n\n  const handleClickEditButton = async (\n    event: FormEvent<HTMLFormElement>,\n    title: string,\n    description: string\n  ): Promise<void> => {\n    if (token) {\n      setLoading(true);\n\n      const editedTask = await updateTask(token, idBoard, idColumn, idTask, {\n        order: orderTask,\n        columnId: idColumn,\n        userId: ownerTask,\n        users: usersOfTask,\n        title: title,\n        description: description,\n      });\n\n      setLoading(false);\n\n      editTask(editedTask);\n\n      setTaskUpdated(taskUpdated);\n    }\n  };\n  return (\n    <>\n      {isLoading && createPortal(<Loader />, rootPortal)}\n      <div\n        {...provider?.draggableProps}\n        {...provider?.dragHandleProps}\n        style={{\n          backgroundColor: isDragging ? '#d4d4d4' : 'transparent',\n          ...provider?.draggableProps.style,\n        }}\n        ref={provider?.innerRef}\n        onMouseEnter={handlePointerOver}\n        onMouseLeave={handlePointerOut}\n        className={styles.task}\n      >\n        <Typography\n          variant=\"body1\"\n          sx={{\n            flex: 'auto',\n            width: '90%',\n            fontFamily: '\"Noto Sans\", sans-serif',\n            fontWeight: 400,\n            fontSize: '16px',\n            textAlign: 'left',\n            wordBreak: 'break-word',\n          }}\n          onClick={handleClickOpenUpdate}\n        >\n          {taskUpdated ? taskUpdated.title : titleTask}\n        </Typography>\n        {(isHovering || matches) && (\n          <BasicMenu\n            handleClickOpenUpdate={handleClickOpenUpdate}\n            handleClickOpenDialog={handleClickOpenDialog}\n            setIsHovering={setIsHovering}\n          />\n        )}\n        {openUpdate && (\n          <BasicModal\n            title={t('boards.formTaskUpdate')}\n            openModal={openUpdate}\n            setOpenModal={setOpenUpdate}\n          >\n            <FormTaskUpdate\n              title={taskUpdated ? taskUpdated.title : titleTask}\n              description={taskUpdated ? taskUpdated.description : descriptionTask}\n              userId={ownerTask}\n              users={usersOfTask}\n              handleClickEditButton={handleClickEditButton}\n              openUpdate={openUpdate}\n              setOpenUpdate={setOpenUpdate}\n            />\n          </BasicModal>\n        )}\n        {openDialog && (\n          <DialogDelete\n            title={t('boards.dialogTask')}\n            openDialog={openDialog}\n            setOpenDialog={setOpenDialog}\n            func={handleClickDeleteButton}\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Task;\n"],"names":["deleteTask","token","idBoard","idColumn","idTask","fetch","URL_BOARDS","method","headers","Accept","Authorization","response","ok","Error","status","json","task","createColumn","obj","body","JSON","stringify","column","updateColumnsSet","URL_COLUMNS_SET","columnsUpdatedList","reoderColumnsApi","columns","map","index","_id","order","updateTasksSet","URL_TASKS_SET","tasksUpdatedList","reoderTasksApi","tasks","columnId","deleteColumn","updateColumn","columnUpdated","createTask","style","marginTop","paddingRight","display","alignItems","justifyContent","gap","FormColumnUpdate","props","t","useTranslation","titleColumn","useRef","useEffect","current","value","setBlur","event","key","preventDefault","blur","addEventListener","removeEventListener","width","onSubmit","titleUpdated","handleClickEdit","setIsInput","Box","TextField","variant","label","name","inputRef","autoFocus","multiline","fullWidth","required","sx","wordBreak","IconButton","type","color","TaskAltRounded","onClick","BlockRounded","maxWidth","flexDirection","initialValues","title","description","FormTask","useState","values","setValues","dispatch","useDispatch","useSelector","state","auth","id","getUserData","idUser","handleInputChange","target","handleClickCreateTask","setOpenModal","onChange","minRows","Button","size","TaskList","delTask","editTask","draggableId","provider","snapshot","Task","isDragging","memo","DROPPABLE_TYPE_COLUMN","makeTasksSelector","createSelector","board","taskByColumns","_","a","tokenSelector","Column","addTask","delColumn","useParams","openModal","tasksSelector","useMemo","openDialog","setOpenDialog","isInput","setColumnUpdated","isLoading","setLoading","handleClickOpenModal","handleClickOpenDialog","handleClickOpenInput","bodyTask","length","userId","users","newTask","handleClickDeleteButton","Promise","all","createPortal","Loader","rootPortal","draggableProps","dragHandleProps","ref","innerRef","className","styles","Typography","fontFamily","letterSpacing","fontWeight","fontSize","textTransform","textAlign","cursor","droppableId","droppableProps","placeholder","endIcon","AddCircleRounded","BasicModal","position","top","right","zIndex","DeleteOutlineOutlined","DialogDelete","D","func","FormColumn","valueInput","setValueInput","handleClickCreateColumn","reorderItems","array","currentIndex","destinationIndex","result","splice","removed","item","DROPPABLE_TYPE_BOARD","navigate","useNavigate","titleBoard","isLoadingColumn","setLoadingColumn","getResult","getBoardData","addTaskMemo","useCallback","setTasksByColumn","delColumnMemo","setColumns","filter","lastTasks","delTaskMemo","deletedTask","idDeletedTask","editTaskMemo","editedTask","taskNew","taskOld","newColumn","component","BOARDS_PATH","alignSelf","onDragEnd","destination","source","sourceIndex","sourceColumnId","destColemnId","destIndex","newTasks","newSourceTasks","newDestTasks","newRemoved","direction","handleClose","open","onClose","borderRadius","Backdrop","backgroundColor","join","left","transform","p","xs","sm","bgcolor","theme","createTheme","typography","allVariants","children","updateTask","taskUpdated","FormTaskUpdate","titleTask","descriptionTask","ownerLogin","setOwnerLogin","getOwnerLogin","getUser","userData","login","descriptionUpdated","handleClickEditButton","setOpenUpdate","handleClickOpenUpdate","setIsHovering","anchorEl","setAnchorEl","openMenu","Boolean","currentTarget","onTouchEnd","Menu","MenuListProps","boxShadow","MenuItem","EditOutlined","orderTask","ownerTask","usersOfTask","boardId","matches","useMediaQuery","isHovering","setTaskUpdated","openUpdate","onMouseEnter","onMouseLeave","flex"],"sourceRoot":""}