{"version":3,"file":"static/js/424.1209013c.chunk.js","mappings":"+LAwBA,UAdsC,SAAH,GAAsB,IAAhBA,EAAQ,EAARA,SAC/BC,GAAOC,EAAAA,EAAAA,KAAY,SAACC,GAAiB,OAAKA,EAAMC,IAAI,IAApDH,GACFI,GAAWC,EAAAA,EAAAA,MAEjB,OAAKL,GAAMI,EAASE,WAAaC,EAAAA,GAI7BP,GAAMI,EAASE,WAAaC,EAAAA,IACvB,SAAC,KAAQ,CAACC,GAAIC,EAAAA,MAGhB,8BAAGV,KAPD,SAAC,KAAQ,CAACS,GAAID,EAAAA,GAAqBL,MAAOQ,EAAAA,EAAAA,QAQrD,C,qBC8IO,IAAKA,E,gCAGX,SAHWA,GAAAA,EAAAA,EAAW,mBAAXA,EAAAA,EAAW,mBAGtB,CAHWA,IAAAA,EAAW,I","sources":["components/RequireAuth/RequireAuth.tsx","types/types.ts"],"sourcesContent":["import { FC, ReactNode } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { AUTHENTICATION_PATH, ROOT_PATH } from 'router/constants';\nimport { IRootState } from 'store/model';\nimport { typeSubPage } from 'types/types';\ninterface IRequireAuth {\n  children: ReactNode;\n}\n\nconst RequireAuth: FC<IRequireAuth> = ({ children }) => {\n  const { id } = useSelector((state: IRootState) => state.auth);\n  const location = useLocation();\n\n  if (!id && location.pathname !== AUTHENTICATION_PATH) {\n    return <Navigate to={AUTHENTICATION_PATH} state={typeSubPage.signIn} />;\n  }\n\n  if (id && location.pathname === AUTHENTICATION_PATH) {\n    return <Navigate to={ROOT_PATH} />;\n  }\n\n  return <>{children}</>;\n};\nexport default RequireAuth;\n","export type BodyForSignUp = {\n  name: string;\n  login: string;\n  password: string;\n};\n\nexport type UserInfo = {\n  _id: string;\n  name: string;\n  login: string;\n};\n\nexport type SignUpError = {\n  statusCode: number | null;\n  message: string;\n};\n\nexport type TypeField = 'name' | 'login' | 'password';\n\nexport type TypeValidationRequirements = {\n  isEmpty: boolean;\n  isMinLength: number;\n  isEmptyText: string;\n  isMinLengthText: string;\n  isRegularMatch: RegExp;\n  isRegularMatchText: string;\n};\n\nexport type TypeValidationForm = {\n  [key in TypeField]: TypeValidationRequirements;\n};\n\nexport type TypeFormInput = {\n  label: string;\n  type: string;\n  name: TypeField;\n  required: boolean;\n  icon: JSX.Element;\n  minlength: number;\n  validation: TypeValidationRequirements;\n};\n\nexport type TypeFormInputsContent = {\n  label: string;\n  type: string;\n  name: TypeField;\n  required: boolean;\n  icon: JSX.Element;\n  minlength: number;\n  autocomplete?: string;\n  validation: TypeValidationRequirements;\n};\n\nexport interface IInput {\n  name: TypeField;\n  isError: boolean;\n  errorText: string;\n  value: string;\n  isLeave: boolean;\n  setValue: React.Dispatch<React.SetStateAction<string>>;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onBlur: (e: React.FocusEvent<HTMLInputElement, Element>) => void;\n  onFocus: (e: React.FocusEvent<HTMLInputElement, Element>) => void;\n}\n\nexport type BodyForSignIn = {\n  login: string;\n  password: string;\n};\n\nexport type SignInResult = {\n  token: string;\n};\n\nexport type Board = {\n  _id: string; // ID of board\n  title: string;\n  description: string;\n  owner: string; // userId of owner\n  users: Array<string>; // [\"userId of invited user #1\", \"userId of invited user #2\"]\n};\n\nexport type BodyForBoard = {\n  title: string;\n  owner: string; // userId of owner\n  users: Array<string>; // [\"userId of invited user #1\", \"userId of invited user #2\"]\n  description: string;\n};\n\nexport interface ColumnType {\n  _id: string; // Column id\n  title: string; // Column title\n  order: number;\n  boardId: string;\n}\n\nexport interface AddColumnType extends ColumnType {\n  tasks: TaskType[];\n}\n\nexport type BodyForColumn = {\n  title: string;\n  order: number;\n};\n\nexport type BodyForColumnsSet = {\n  title: string;\n  order: number;\n  boardId: string;\n};\n\nexport type BodyForColumnsSetOrder = {\n  _id: string; // Column id\n  order: number;\n};\n\nexport type TaskType = {\n  _id: string; // Task id\n  title: string; // Task title\n  order: number;\n  boardId: string; // id of board\n  columnId: string; // id of column\n  description: string; // Task decription\n  userId: string; // userId of task owner\n  users: Array<string>; // [\"userId of invited user #1\", \"userId of invited user #2\"]\n};\n\nexport type BodyForTask = {\n  title: string; // Task title\n  order: number;\n  description: string; // Task decription\n  userId: string; // userId of task owner\n  users: Array<string>; // [\"userId of invited user #1\", \"userId of invited user #2\"]\n};\n\nexport type BodyForTaskUpdating = {\n  title: string; // Task title\n  order: number;\n  description: string; // Task decription\n  columnId: string; //! дублирование columnId в функции updateTask: параметр и боди\n  userId: string; // userId of task owner\n  users: Array<string>; // [\"userId of invited user #1\", \"userId of invited user #2\"]\n};\n\nexport type BodyForTasksSetOrder = {\n  _id: string; // Task id\n  order: number;\n  columnId: string;\n};\n\nexport type File = {\n  _id: string; // File id\n  name: string; // \"example.img\"\n  taskId: string; // id of task\n  boardId: string; // id of board\n  path: string; // \"files/taskId-name\"\n};\n\nexport type UserDecoder = {\n  exp: number;\n  iat: number;\n  id: string;\n  login: string;\n};\n\nexport enum typeSubPage {\n  signUp,\n  signIn,\n}\n"],"names":["children","id","useSelector","state","auth","location","useLocation","pathname","AUTHENTICATION_PATH","to","ROOT_PATH","typeSubPage"],"sourceRoot":""}